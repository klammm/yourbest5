swagger: "2.0"
info:
  version: "0.0.1"
  title: YourBest5(+weather)
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  # USER ROSTER

  /api/users:
    x-swagger-router-controller: userRoster
    get:
      description: Returns all the users in our database
      operationId: findAllUsers
      produces:
        - application/json
      responses:
        200:
          description: all users
          schema:
            type: array
            items:
              $ref: '#/definitions/userResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/users/{userid}:
    x-swagger-router-controller: userRoster
    get:
      description: Returns the specific user's info
      operationId: findUser
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: The user id that is logged in
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: one user
          schema:
            $ref: '#/definitions/userResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/users/{userid}/team:
    x-swagger-router-controller: userRoster
    get:
      description: Returns the user's team
      operationId: findUserTeam
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: The user id that is logged in
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Returns a JSON object of the user's team
          schema:
            $ref: '#/definitions/teamResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      description: create a new team for the user
      operationId: createTeam
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: The user id that is logged in
          required: true
          type: integer
          format: int64
        - in: body
          name: newPlayer
          description: New player to be added to the team
          required: true
          schema:
            $ref: '#/definitions/postRosterResponse'
      responses:
        200:
          description: Returns a JSON object of the user's newly created team
          schema:
            $ref: '#/definitions/teamResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      description: Deletes the user's team
      operationId: deleteTeam
      parameters:
        - name: userid
          in: path
          description: The user id that is logged in
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Team deleted
          schema:
            $ref: '#/definitions/rosterResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/users/{userid}/team/player:
    x-swagger-router-controller: userRoster
    # post:
    #   description: Add one player to the team
    #   operationId: addPlayerUserRoster
    #   produces:
    #     - application/json
    #   parameters:
    #     - name: userid
    #       in: path
    #       description: The user id that is logged in
    #       required: true
    #       type: integer
    #       format: int64
    #     - name: position
    #       in: query
    #       description: The position seeking to be placed into
    #       required: true
    #       type: string
    #     - in: body
    #       name: newPlayer
    #       description: ID of the player to be added
    #       required: true
    #       schema:
    #         $ref: '#/definitions/getPlayerResponse'
    #   responses:
    #     200:
    #       description: Returns a JSON object of the user's team
    #       schema:
    #         $ref: '#/definitions/teamResponse'
    #     default:
    #       description: unexpected error
    #       schema:
    #         $ref: '#/definitions/ErrorResponse'
    put:
      description: Replace a player in the team
      operationId: updatePlayer
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: The user id that is logged in
          required: true
          type: integer
          format: int64
        - name: currentPlayerID
          in: query
          description: The position seeking to be placed into
          required: true
          type: integer
          format: int64
        - in: body
          name: newPlayer
          description: the player id of the new player being added in
          required: true
          schema:
            $ref: '#/definitions/updatePlayerResponse'
      responses:
        200:
          description: Returns a JSON object of the chosen update player
          schema:
            $ref: '#/definitions/getPlayerResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/users/{userid}/team/score:
    x-swagger-router-controller: userRoster
    get:
      description: Returns the team's +/- score
      operationId: score
      produces:
        - application/json
      parameters:
        - name: userid
          in: path
          description: The user id that is logged in
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Returns the integer +/- score
          schema:
            $ref: '#/definitions/plusminusResponse'
        default:
            description: unexpected error
            schema:
              $ref: '#/definitions/ErrorResponse'
  /api/nba:
    x-swagger-router-controller: allNBA
    get:
      description: Returns all players from the database
      operationId: allPlayers
      produces:
        - application/json
      responses:
        200:
          description: Returns an  array of all the players within our database
          schema:
            type: array
            items:
              $ref: '#/definitions/getPlayerResponse'
        default:
            description: unexpected error
            schema:
              $ref: '#/definitions/ErrorResponse'
    post:
      description: Creates a new player within the database
      operationId: addPlayerNbaDB
      produces:
        - application/json
      parameters:
        - name: player
          in: body
          description: new player being added to the database
          required: false
          schema:
            $ref: '#/definitions/postPlayerResponse'
      responses:
        200:
          description: returns the new player being added
          schema:
            $ref: '#/definitions/postPlayerResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/nba/{playerid}:
    x-swagger-router-controller: allNBA
    get:
      description: Returns a specific player from the database
      operationId: onePlayer
      produces:
        - application/json
      parameters:
        - name: playerid
          in: path
          description: The player id being searched for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Returns the specified player from the database
          schema:
              $ref: '#/definitions/getPlayerResponse'
        default:
          description: unexpected error
          schema:
              $ref: '#/definitions/ErrorResponse'
  /api/nba/{playerid}/highlights:
    x-swagger-router-controller: allNBA
    get:
      description: Returns a youtube url with highlights of the specific player
      operationId: playerHighlights
      parameters:
        - name: playerid
          in: path
          description: The player id being searched for
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Returns the highlight url for the player
          schema:
              $ref: '#/definitions/youtubeResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/nba/rankings/{stat}:
    x-swagger-router-controller: allNBA
    get:
      description: Returns the rankings for a certain stat
      operationId: statRankings
      produces:
        - application/json
      parameters:
        - name: stat
          in: path
          description: The stat being searched for
          required: true
          type: string
      responses:
        200:
          description: Returns an array of all the stats in order
          schema:
            type: array
            items:
              $ref: '#/definitions/statResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /api/nba/rankings/player:
    x-swagger-router-controller: allNBA
    get:
      description: Returns the rankings for most picked player
      operationId: mostPickedPlayerRankings
      responses:
        200:
          description: Returns an array of all the stats in order
          schema:
            type: array
            items:
              $ref: '#/definitions/mostPickedPlayerResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorResponse'
  # /api/nba/rankings/positions/{position}:
  #   x-swagger-router-controller: allNBA
  #   get:
  #     description: Returns the rankings for a certain position
  #     operationId: playerPositionRankings
  #     produces:
  #       - application/json
  #     parameters:
  #       - name: position
  #         in: path
  #         description: The position being searched for
  #         required: true
  #         type: string
  #     responses:
  #       200:
  #         description: Returns an array of all the most picked players for that position
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/definitions/getPlayerResponse'
  #       default:
  #         description: unexpected error
  #         schema:
  #           $ref: '#/definitions/ErrorResponse'
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  userResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      first_name:
        type: string
      last_name:
        type: string
  youtubeResponse:
    type: string
  mostPickedPlayerResponse:
    type: object
    properties:
      name:
        type: string
      player_id:
        type: integer
        format: int64
      picked:
        type: integer
        format: int64
  statResponse:
    required:
      - name
    type: object
    properties:
      name:
        type: string
      result:
        type: number
        format: float
  plusminusResponse:
    required:
      - score
    properties:
      score:
        type: number
        format: float
  updatePlayerResponse:
    type: integer
    format: int64
  postPlayerResponse:
    type: object
    properties:
      name:
        type: string
      position:
        type: string
      ppg:
        type: number
        format: float
      apg:
        type: number
        format: float
      fgp:
        type: number
        format: float
      ftp:
        type: number
        format: float
      rpg:
        type: number
        format: float
      bpg:
        type: number
        format: float
      spg:
        type: number
        format: float
      tpg:
        type: number
        format: float
  getPlayerResponse:
    required:
      - name
      - id
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      position:
        type: string
      ppg:
        type: number
        format: float
      apg:
        type: number
        format: float
      fgp:
        type: number
        format: float
      ftp:
        type: number
        format: float
      rpg:
        type: number
        format: float
      bpg:
        type: number
        format: float
      spg:
        type: number
        format: float
      tpg:
        type: number
        format: float
  rosterResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  postRosterResponse:
    type: string
  teamResponse:
    type: object
    properties:
      PG:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          position:
            type: string
          ppg:
            type: number
            format: float
          apg:
            type: number
            format: float
          fgp:
            type: number
            format: float
          ftp:
            type: number
            format: float
          rpg:
            type: number
            format: float
          bpg:
            type: number
            format: float
          spg:
            type: number
            format: float
          tpg:
            type: number
            format: float
      SG:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          position:
            type: string
          ppg:
            type: number
            format: float
          apg:
            type: number
            format: float
          fgp:
            type: number
            format: float
          ftp:
            type: number
            format: float
          rpg:
            type: number
            format: float
          bpg:
            type: number
            format: float
          spg:
            type: number
            format: float
          tpg:
            type: number
            format: float
      SF:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          position:
            type: string
          ppg:
            type: number
            format: float
          apg:
            type: number
            format: float
          fgp:
            type: number
            format: float
          ftp:
            type: number
            format: float
          rpg:
            type: number
            format: float
          bpg:
            type: number
            format: float
          spg:
            type: number
            format: float
          tpg:
            type: number
            format: float
      PF:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          position:
            type: string
          ppg:
            type: number
            format: float
          apg:
            type: number
            format: float
          fgp:
            type: number
            format: float
          ftp:
            type: number
            format: float
          rpg:
            type: number
            format: float
          bpg:
            type: number
            format: float
          spg:
            type: number
            format: float
          tpg:
            type: number
            format: float
      C:
        type: object
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          position:
            type: string
          ppg:
            type: number
            format: float
          apg:
            type: number
            format: float
          fgp:
            type: number
            format: float
          ftp:
            type: number
            format: float
          rpg:
            type: number
            format: float
          bpg:
            type: number
            format: float
          spg:
            type: number
            format: float
          tpg:
            type: number
            format: float
